# Default values for datashield.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
global:
  # Image registry and pull secrets
  imageRegistry: ""
  imagePullSecrets: []
  # Storage class for persistent volumes
  storageClass: ""

# Name overrides
nameOverride: ""
fullnameOverride: ""

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 10041
  runAsGroup: 10041
  fsGroup: 10041

# Security context for containers
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 10041
  runAsGroup: 10041
  allowPrivilegeEscalation: false

# External Database Configuration for Opal
# Users should deploy databases using well-maintained Helm charts (e.g., Bitnami)
# and configure the connection details below
externalDatabases:
  # MongoDB connection settings
  mongodb:
    host: "mongo"
    port: 27017
    user: "root"
    password: "example"
    # Optional: Reference to an existing Kubernetes secret containing connection details
    # If provided, the above values will be ignored
    existingSecret: ""
    existingSecretKeys:
      host: "host"
      port: "port" 
      user: "user"
      password: "password"
  
  # MySQL connection settings
  mysql:
    host: "mysqldata"
    port: 3306
    database: "opal"
    user: "opal"
    password: "password"
    # Optional: Reference to an existing Kubernetes secret containing connection details
    # If provided, the above values will be ignored
    existingSecret: ""
    existingSecretKeys:
      host: "host"
      port: "port"
      database: "database"
      user: "user"
      password: "password"
  
  # MariaDB connection settings  
  mariadb:
    host: "mariadbdata"
    port: 3306
    database: "opal"
    user: "opal"
    password: "password"
    # Optional: Reference to an existing Kubernetes secret containing connection details
    # If provided, the above values will be ignored
    existingSecret: ""
    existingSecretKeys:
      host: "host"
      port: "port"
      database: "database"
      user: "user"
      password: "password"
  
  # PostgreSQL connection settings
  postgresql:
    host: "postgresdata"
    port: 5432
    database: "opal"
    user: "opal"
    password: "password"
    # Optional: Reference to an existing Kubernetes secret containing connection details
    # If provided, the above values will be ignored
    existingSecret: ""
    existingSecretKeys:
      host: "host"
      port: "port"
      database: "database"
      user: "user"
      password: "password"

# Opal configuration
opal:
  enabled: true
  # Note: OPAL uses OrientDB which doesn't support concurrent access
  # This is now a StatefulSet with exactly 1 replica to prevent database corruption
  image:
    repository: obiba/opal
    tag: "5.1.4"
    pullPolicy: IfNotPresent
  
  # Command and args to override Docker entrypoint for Azure File share compatibility
  # Uncomment these lines when using Azure File shares to bypass chown operations
  command: ["/bin/bash"]
  args: 
    - "-c"
    - |
      # Reconstruct opal-config.properties from individual ConfigMap files
      echo "# Generated Opal Configuration Properties" > /srv/conf/opal-config.properties
      echo "# Generated on $(date)" >> /srv/conf/opal-config.properties
      echo "" >> /srv/conf/opal-config.properties
      # Add all properties from the mounted ConfigMap files
      for file in /etc/opal-config/*; do
        if [ -f "$file" ]; then
          key=$(basename "$file")
          value=$(cat "$file")
          echo "$key=$value" >> /srv/conf/opal-config.properties
        fi
      done
      # Start Opal server (its own startup script will merge with environment variables)
      /opt/opal/bin/start.sh
  service:
    type: ClusterIP
    port: 8080
    annotations: {}
  
  persistence:
    enabled: true
    # ReadWriteOnce ensures only one pod can mount the volume at a time
    # This is critical for OrientDB which doesn't support concurrent access
    accessMode: ReadWriteOnce
    size: 2Gi
    annotations: {}
  
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Opal configuration
  config:
    # External secret reference (if using existing Kubernetes secrets)
    # If provided, no random secrets will be generated for Opal
    existingSecret: ""
    csrfAllowed: "datashield.local"
    httpsPort: "-1"
    contextPath: ""
    # Administrator password for Opal
    administratorPassword: "password"
    
    # Custom opal-config.properties file content
    # Users can provide their own properties file using --set-file opal.config.customPropertiesFile=./my-opal-config.properties
    # If not provided, the default config/opal-config.properties from the chart will be used
    customPropertiesFile: ""
  
  # Health check probes
  livenessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 120
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  
  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # Demo data configuration
  demo:
    enabled: true
    # External secret reference (if using existing Kubernetes secrets)
    # If provided, no random secrets will be generated for demo user
    existingSecret: ""
    userName: "dsuser"
    projectName: "CNSIM"
    tableName: "CNSIM99"
    sourceDataUrl: "https://raw.githubusercontent.com/OllyButters/ds_data/main/CNSIM/CNSIM1.csv"
    cohortProject: "COHORT"
    cohortTable: "conditions1"
    cohortSourceDataUrl: "https://raw.githubusercontent.com/OllyButters/ds_data/main/synthea/conditionsa.csv"

# Rock configuration
rock:
  enabled: true
  replicaCount: 1
  image:
    repository: obiba/rock
    tag: "2.1.4"
    pullPolicy: IfNotPresent
  
  # Command and args to override Docker entrypoint if needed
  # command: ["/bin/bash"]
  # args: ["-c", "exec /usr/local/bin/docker-entrypoint.sh"]
  
  service:
    type: ClusterIP
    port: 8085
    annotations: {}
  
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Rock configuration
  config:
    # External secret reference (if using existing Kubernetes secrets)
    # If provided, no random secrets will be generated for Rock
    existingSecret: ""
    administratorName: "administrator"
    managerName: "manager"
    userName: "user"
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5

# Agate configuration
agate:
  enabled: false
  replicaCount: 1
  image:
    repository: obiba/agate
    tag: "2.8"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8081
    annotations: {}
  
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Agate configuration
  config:
    # External secret reference (if using existing Kubernetes secrets)
    # If provided, no random secrets will be generated for Agate
    existingSecret: ""

# Mica configuration
mica:
  enabled: false
  replicaCount: 1
  image:
    repository: obiba/mica
    tag: "5.3"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8082
    annotations: {}
  
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Mica configuration
  config:
    # External secret reference (if using existing Kubernetes secrets)
    # If provided, no random secrets will be generated for Mica
    existingSecret: ""
    javaOpts: "-Xmx2G"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  # Hostname for the ingress
  host: datashield.local
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 64m
  tls:
    - secretName: datashield-tls

# Autoscaling configuration (disabled by default)
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Network policies
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Monitoring and observability
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    annotations: {}

# Testing
tests:
  enabled: true
  image:
    repository: busybox
    tag: "1.35"
    pullPolicy: IfNotPresent
